문제.
아래 출력 내용과 같이 학생성적 프로그램을 작성해보자.
(단, 입력은 prompt 함수를 사용)

prompt
이름을 입력하세요. 김사과
국어점수를 입력하세요. 100
영어점수를 입력하세요. 90
수학점수를 입력하세요. 80

출력
김사과님의 성적표
국어점수 : 100점
영어점수 : 90점
수학점수 : 80점
총점 : 270점
평균 : 90점


제어문
프로그램의 순차적인 흐름을 제어해야 할 때 사용하는 실행문을 의미합니다.

1. 조건문
프로그램 내에서 주어진 조건문의 결과에 따라 별도의 명령을 수행하도록 제어하는 실행문입니다.
	1) if 문 : 범위에 대한 조건을 줄 때 유리합니다.
	2) switch 문 : 특정 값과 일치하는 것을 찾을 때 유리합니다.


2. 반복문
프로그램 내에서 같은 명령을 일정 횟수만큼 반복하여 수행하도록 제어하는 실행문입니다.
	1) while 문
	2) for 문


if 문
조건식의 결과가 참(true)이면 주어진 실행문을 실행하고, 거짓(false)이면 아무것도 실행하지 않는 문장입니다.

if(조건식) {
	조건식의 결과가 참일 때 실행할 문장;
	...
}

* {}(중괄호)의 역할은 조건식의 결과가 참(true)인 경우 여러줄의 실행문을 실행하기 위해 사용합니다.

if ~ else 문
if문과 같이 사용할 수 있는 else문은 if문의 조건식의 결과가 거짓(false)일 때 실행문을 실행합니다.

if(조건식) {
	조건식의 결과가 참일 때 실행할 문장;
}else{
	조건식의 결과가 거짓일 때 실행할 문장;
}


if ~ else if ~ else 문
else if문은 if문처럼 조건식을 설정할 수 있으므로 중첩된 if문을 좀 더 간결하게 표현할 수 있습니다. 하나의 조건문 안에서 if문과 else문은 단 한번만 사용할 수 있습니다. 하지만 else if문은 여러번 사용하여 다양한 조건을 설정할 수 있습니다. (단, else문은 생략 가능)

if(조건식1) {
	조건식1의 결과가 참일 때 실행할 문장;
}else if(조건식2){
	조건식2의 결과가 참일 때 실행할 문장;
}else if(조건식3){
	조건식3의 결과가 참일 때 실행할 문장;
}
...
else{
	모든 조건식의 결과가 거짓일 때 실행할 문장;
}


문제.
아래 출력 내용과 같이 학생성적 프로그램을 작성해보자.
1. 입력은 prompt 함수를 사용
2. 학점은 평균을 기준으로 90점 이상이면 A학점, 80점 이상이면 B학점, 70점 이상이면 C학점, 60점 이상이면 D학점, 나머지는 F학점으로 함

prompt
이름을 입력하세요. 김사과
국어점수를 입력하세요. 100
영어점수를 입력하세요. 90
수학점수를 입력하세요. 80

출력
김사과님의 성적표
국어점수 : 100점
영어점수 : 90점
수학점수 : 80점
총점 : 270점
평균 : 90점
학점 : A학점


switch 문
switch문은 if ~ else문과 마찬가지로 주어진 조건 값에 따라 프로그램이 다른 명령을 수행하도록 하는 조건문입니다. switch문은 if ~ else문 보다 가독성 및 속도 측면에서 더 유리합니다.

switch(비교값){
	case 값1:
		비교값이 값1과 일치할 경우 실행할 문장;
		break;
	case 값2:
		비교값이 값2와 일치할 경우 실행할 문장;
		break;
	...
	default:
		비교값이 모두 일치하지 않을 경우 실행할 문장;
}


while 문
특정 조건식을 만족하는 동안 계속해서 주어진 실행문을 반복합니다.

while(조건식){
	조건식의 결과가 참인 동안 반복될 실행문;
}

문제
1 ~ 100까지 짝수의 총합을 구하는 프로그램을 만들어보자.


do ~ while문
while문은 루트에 진입하기 전에 먼저 조건식부터 검사를 합니다. 하지만 do ~ while문은 먼저 루프를 한 번 실행한 후에 조건식을 검사합니다.

do {
	조건식의 결과가 참인 동안 반복될 실행문;
}while(조건식);


For 문
for문은 while문과 달리 자체적으로 초기값, 조건식, 증감식을 모두 포함하고 있는 반복문입니다. while문 보다는 간결하게 반복을 표현할 수 있습니다.

for(초기값; 조건식; 증감식){
	조건식의 결과가 참인 동안 반복할 실행문;
}

for(let i=1; i<=10; i++){
	console.log('안녕하세요. JavaScript');
}

문제
while문으로 작성된 구구단 프로그램을 for문을 이용하여 재작성해보자.


continue 문
반복중인 루트 내에서 사용하여 해당 루프의 나머지 부분을 건너뛰고, 다음 조건식의 판단으로 넘어가게 합니다. 보통 반복문 내에서 특정 조건에 대한 처리를 제외하고자 할 때 사용합니다.

break 문
반복중인 루프 내에서 사용하여 해당 반복문을 완전히ㅣ 종료시키고 반복문 바로 다음에 위치한 실행문으로 프로그램의 흐름을 이동시킵니다. 루프 내에서 조건식의 판단 결과에 상관없이 반복문을 빠져나가고 싶을 때 사용합니다.






