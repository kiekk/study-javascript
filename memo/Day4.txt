중첩 for문
for문이 2개이상 겹쳐있는 프로그램을 의미합니다.

for(초기값; 조건식1; 증감식){
	조건식1의 결과가 참인 동안 반복할 실행문;
	for(초기값; 조건식2; 증감식){
		조건식2의 결과가 참인 동안 반복할 실행문;
	}
}

for(let i=1; i<=3; i++){
	for(let j=1; j<=5; j++){
		console.log('안녕하세요. JavaScript!');
	}
}


문제
아래와 같은 출력을 중첩 for문으로 표현하여 작성합니다.
(단, ★를 한개씩 사용하여 표현)

1.
★ ★ ★ ★ ★
★ ★ ★ ★ ★ 
★ ★ ★ ★ ★ 
★ ★ ★ ★ ★ 
★ ★ ★ ★ ★ 

2. 
★ ★ ★ ★ ★ 
★ ★ ★ ★
★ ★ ★
★ ★
★

3.
★ 
★ ★ 
★ ★ ★ 
★ ★ ★ ★
★ ★ ★ ★ ★


배열(array)
자바스크립트에서 배열은 이름과 인덱스로 참조되는 정렬된 값의 집합입니다. 배열을 구성하는 각각의 값을 배열 요소라고 하며, 배열에서의 위치를 가리키는 숫자를 인덱스라고 합니다.

배열을 만드는 방법

1.
let 배열이름;	// 배열의 선언
배열이름 = [요소1, 요소2, 요소3, 요소4... ]; // 배열의 초기화
	배열이름[0] 배열이름[1] ...

let arr;
arr = [100, 150, 200, 250];
or
let arr = [100, 150, 200, 250];


console.log(arr[2]);	// 200

2.
let 배열이름 = Array(요소1, 요소2, 요소3 ..);
or
let 배열이름 = new Array(요소1, 요소2, 요소3 ..);

let arr = new Array(100, 150, 200, 250);

자바스크립트 배열의 특징
1. 배열 요소의 타입이 고정되어 있지 않으므로, 같은 배열에 있는 배열 요소끼리의 타입이 다를 수 있습니다.
let arr = [1, 2, true, '김사과', 100.5];
2. 배열 요소의 인덱스가 연속적이지 않아도 되며, 특정 배열 요소가 비어 있을 수 있습니다.
let arr;
arr[0] = 1;
arr[1] = 2;
arr[5] = '김사과';
3. 자바스크립트의 배열은 Array 객체로 다뤄집니다.

* Array 객체의 메소드
push() : 배열의 요소를 추가합니다.
pop() : 배열의 마지막 주소에 있는 값을 제거합니다.
shift() : 배열의 첫번째 주소에 있는 값을 제거합니다.
concat() : 두 개의 배열을 합쳐주는 함수입니다.
join() : 배열 요소에 사이에 원하는 문자를 삽입합니다.
reverse() : 배열을 역순으로 재배치합니다.
sort() : 배열을 오름차순으로 정렬합니다.

let arr = [1, 2, true, '김사과', 100.5];
arr.pop(); // [1, 2, true, '김사과']


for ~ in 반복문

for(변수선언 in 배열){	// 변수 -> 인덱스
	배열의 요소만큼 반복할 실행문;
}

for ~ of 반복문

for(변수선언 of 배열){	// 변수 -> 요소
	배열의 요소만큼 반복할 실행문;
}

foreach 반복문
배열이름.forEach(function(변수){	// 변수 -> 요소
	배열의 요소만큼 반복할 실행문;
}


사용자 정의 함수(function)
하나의 특별한 목적의 작업을 수행하도록 설계된 독립적인 블록을 의미합니다. 함수는 필요할 때마다 호출하여 해당 작업을 반복해서 수행할 수 있습니다.

1. 이름만 존재하는 함수
function 함수이름(){
	함수가 호출되었을 때 실행할 문장;
}

함수이름();	// 호출

2. 매개변수를 입력하여 호출하는 함수
function 함수이름(매개변수1, 매개변수2 ..){
	함수가 호출되었을 때 실행할 문장;
}

함수이름(값1, 값2 ..);	// 호출

* 디폴트 매개변수 : 함수를 호출할 때 명시된 인수를 전달하지 않았을 경우에 사용하게 될 기본값입니다.
function 함수이름(매개변수1=값1, 매개변수2=값2..){
	함수가 호출되었을 때 실행할 문장;
}

* 나머지 매개변수 : 생략 접두사(...)를 사용하여 특정 위치의 인수부터 마지막 인수까지를 한 번에 지정할 수 있습니다.
function 함수이름(매개변수1, ...매개변수2){
	함수가 호출되었을 때 실행할 문장;
}

※호이스팅
자바스크립트 엔진이 script 태그를 만나면 자바스크립트 파일을 먼저 읽고 선언된 함수를 메모리에 저장합니다. 이 과정이 끝나면 코드가 위에서 부터 차례대로 실행되며 '함수 선언식'으로 만들어진 함수의 경우 메모리에 저장되어 있기 때문에 문제없이 실행되지만, '함수 표현식'으로 만든 함수는 아직 값이 할당되기 전이기 때문에 에러가 발생합니다. 함수 선언식으로 선언된 함수는  호이스팅이 된다고 표현합니다.

매개변수가 있는 함수

function 함수이름(매개변수1, 매개변수2 ..){
	실행문;
}

함수이름(값1, 값2..);

const 상수 = function(매개변수1, 매개변수2 ..){
	실행문;
}

상수(값1, 값2 ..);

디폴트 매개변수

function 함수이름(매개변수1 = 값1, 매개변수2 = 값2){
	실행문;
}

나머지 매개변수
생략 접두사(...)를 사용하여 특정 위치의 인수부터 마지막 인수까지 한 번에 저장할 수 있습니다.

function 함수이름(매개변수1, 매개변수2, ...매개변수3){
	실행문;
}

함수이름(값1,값2,값3,값4,값5,값6)
//매개변수1=값2, 매개변수2=값2, 매개변수3=[값3,값4,값5,값6];


리턴값이 있는 함수

function 함수이름(매개변수1, 매개변수2 ..){
	실행문;
	return 값;
}
let 변수 = 함수이름(값1, 값2);	//return 값이 변수에 저장

함수 표현식에서 이름이 있는 함수

const 상수 = function 함수이름(매개변수1,매개변수2..){
	실행문;
	..
	함수이름();
	return 값;
}



함수를 만들고 직접 호출하는 함수 - 즉시 실행 함수
	(function(){
		실행문;
		..
	})();
함수이름(값1, 값2..); (X)
상수(값1, 값2..); (O)

화살표 함수 

ECMA6에 추가된 문법입니다. 
function 키워드를 사용하여 함수를 만드는 것보다 간단하게 표현합니다.
화살표 함수는 항상 익명 함수 일때만 가능합니다.

//일반 함수
const Hello1 = function(){
	console.log('안녕하세요. JavaScript');
}

//화살표 함수
const Hello1 = () => console.log('안녕하세요. JavaScript');

//매개변수가 있는 경우
const func2 = x => console.log(x);
func2(10);

const func3 = (x, y) => x + y;
const result = func3(10, 3);

const func4 = (x, y) => {
	let sum = 0;
	for(let i=x;i<=y;i++){
	   sum += i;
	}
	return sum;
}
const result = func4(1,10);

＊{}를 사용하면 return 키워드를 반드시 작성해야 합니다.
const func5 = (x, y) => x + y;
const result = func5(10, 3);	//13
const func6 = (x, y) => { x + y };
const result = func6(10, 3);	//undefined






